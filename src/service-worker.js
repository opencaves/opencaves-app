/* eslint-disable no-restricted-globals */

// See https://developers.google.com/web/tools/workbox/modules

import { setCacheNameDetails, clientsClaim } from 'workbox-core'
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching'
import { registerRoute } from 'workbox-routing'
import { StaleWhileRevalidate, CacheFirst } from 'workbox-strategies'
import * as googleAnalytics from 'workbox-google-analytics'

const CACHE_PREFIX = 'oc'
const CACHE_SUFFIX = 'v1'

function cacheName(name) {
  return `${CACHE_PREFIX}-${name}-${CACHE_SUFFIX}`
}

setCacheNameDetails({
  prefix: CACHE_PREFIX,
  suffix: CACHE_SUFFIX,
  precache: 'app',
  googleAnalytics: 'analytics'
})

clientsClaim()

googleAnalytics.initialize({
  parameterOverrides: {
    network_status: 'offline'
  }
})

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
const manifest = self.__WB_MANIFEST
// console.log('manifest: %o', manifest)
precacheAndRoute(manifest)

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$')
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false
    }

    // If this looks like a URL for a resource, because it contains // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false
    }

    // Return true to signal that we want to use the handler.
    return true
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
)

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/

const imagesRegEx = /\.(png|jpg|ico|webp)($|\?|#)/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && imagesRegEx.test(url.pathname),
  new StaleWhileRevalidate({
    cacheName: cacheName('images')
  })
)

registerRoute(
  ({ url }) => url.origin === 'https://maps.googleapis.com',
  new StaleWhileRevalidate({
    cacheName: cacheName('google-maps-api')
  })
)

registerRoute(
  ({ url }) => url.origin === 'https://api.mapbox.com',
  new StaleWhileRevalidate({
    cacheName: cacheName('mapbox-api')
  })
)

registerRoute(
  ({ url }) => url.origin === 'https://www.googletagmanager.com',
  new StaleWhileRevalidate({
    cacheName: cacheName('analytics')
  })
)

// registerRoute(
//   ({ url }) => url.origin === 'https://docs.google.com',
//   new NetworkFirst({
//     cacheName: cacheName('data'),
//     networkTimeoutSeconds: 8
//   })
// )

registerRoute(
  ({ url }) => url.origin === 'https://unpkg.com',
  new CacheFirst({
    cacheName: cacheName('vendors')
  })
)

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting()
  }
})

// Any other custom service worker logic can go here.
